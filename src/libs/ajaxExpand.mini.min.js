var ajaxExpanding=(function () {
	function isDomObject(domObject , type){
		if(domObject == null ||undefined){
			return false;
		}
		if(typeof domObject == 'object' && domObject.nodeType === 1){
			if(!type || type=='all' || domObject.nodeName.toLowerCase() == type.toLowerCase())
				return true;
			else
				return false;
		}
		else{
			return false;
		}
	}
	function suffixParse(fileName){
		var array = fileName.split('.');
		return array[array.length-1];
	}
	function isJson(obj){
		var isjson= typeof obj== "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length;
		return isjson;
	}
	function getXhr(){
		return new XMLHttpRequest();
	}
	function encodeData(dataObj,name,that,dataType){
		var data='',
			 i,
			 j,
			 isSuffix = true,
			 isSize = true,
			 suffix,
			 size,
			 len,
			errorInf = '',
			 checkInf = {},
			 checkInfs = [],
			 key;
		switch (dataType){
			case 'json':
				if(typeof dataObj == 'object'){
					for(key in dataObj) {
						if (dataObj[key] !== undefined && dataObj[key] !== null) {
							if (data !== '')
								data += '&' + key + '=' + JSON.stringify(dataObj[key]).replace(/\"/g, "");
							else
								data += key + '=' + JSON.stringify(dataObj[key]).replace(/\"/g, "");
						}
					}
				}
				else if(typeof dataObj == 'string'){
					data=dataObj;
				}
				break;
			case 'form':// 通过formData 传输
				if(window.FormData){
					var formData=new FormData();
					if(typeof dataObj == 'object'){
						for( key in dataObj){
							// 文件检测
							if(Object.prototype.toString.call(dataObj[key].value) == '[object FileList]') {
								checkInf = {
									isCheck:true,
									type:dataObj[key].type || key
								}
								len = dataObj[key].value.length;
								if (len == 0) {
									that.ischeck=false;
									checkInf.isCheck = false;
								}
								if(dataObj[key].suffix && that.ischeck){
									for (i = 0; i < len; i++) {
										suffix = suffixParse(dataObj[key].value[i].name);
										that.ischeck=dataObj[key].suffix.some(function(value){
											return suffix.toLowerCase() == value.toLowerCase();
										});
										isSuffix = that.ischeck;

									}
								}
								if(dataObj[key].maxSize && isSuffix && that.ischeck){
									for (i = 0; i < len; i++) {
										size = dataObj[key].value[i].size;
										if(size > dataObj[key].maxSize *1024 * 1024){
											that.ischeck = false;
											isSize = false;
										}
									}
								}
								if(len > 0 && !that.ischeck){
									if(!isSuffix){
										errorInf = '文件格式不满足:' + dataObj[key].suffix.join(',') + '格式';

									}else if(!isSize){
										errorInf = '文件大小超过:' + dataObj[key].maxSize + 'mb';
									}
									checkInf.isCheck = false;
								}
								if(that.ischeck){
									for (i = 0; i < len; i++) {
										formData.append(key, dataObj[key].value[i]);
									}
								}
								checkInf.errorInf =errorInf?errorInf:dataObj[key].errorInf;
								checkInfs.push(checkInf);
							}
							else{
								if(dataObj[key].pattern){
									checkInf = {
										isCheck:true,
										type:dataObj[key].type || key
									}
									var value;
									if(dataObj[key].checkValue != undefined){
										value = dataObj[key].checkValue;
									}
									else{
										value = dataObj[key].value;
									}
									if(!dataObj[key].pattern.test(value)){
										that.ischeck=false;
										checkInf.isCheck = false;
									}
									else {
										formData.append(key,dataObj[key].value);
									}
									checkInf.errorInf = dataObj[key].errorInf;
									checkInfs.push(checkInf);
								}
								else{
									formData.append(key,dataObj[key].value);
								}
							}
						}
						if(that.onCheck){
								that.onCheck(checkInfs);
						}
						data = formData;
					}
				}
			 	break;
		}
		console.log(data);
		return data;
	}
	return {
		init: function (ajaxInf) {
			var that = this[ajaxInf.name] = {};
			that.result = null;
			that.handleData = ajaxInf.handleData || null;
			that.type = ajaxInf.type || 'get';
			that.async = ajaxInf.async || false;
			that.dataType = ajaxInf.dataType || 'json';
			that.timeOut = ajaxInf.timeOut;
			that.xhr = getXhr();
		},
		send: function (dataInf, name, bindObj) { // 发送数据
			var that = this[name],
				 xhr = that.xhr,
				 data;
				that.ischeck = true;
				that.onCheck=dataInf.onCheck;

				data = encodeData(dataInf.data, name, that,that.dataType);
				if(that.ischeck) {
					that.stopFlag = false;
					that.timeoutFlag = false;
					if(dataInf.onStart){
						dataInf.onStart();
					}
					if (!bindObj)
						bindObj = that;
					if (dataInf.onProgress) {
						try {
							xhr.onprogress = function (e) {
								if (e.total > 0)
									dataInf.onProgress.call(bindObj, e.loaded, e.total);
							}
						} catch (e) {
						}
					}
					if (dataInf.onAbort) {
						try {
							xhr.onabort = function (e) {
								if (that.stopFlag)
									dataInf.onAbort.call(bindObj, xhr.status);
							}
						} catch (e) {
						}
					}
					if (dataInf.onError) {
						try {
							xhr.onerror = function (e) {
								dataInf.onError.call(bindObj);
							}
						} catch (e) {
						}
					}
					xhr.onreadystatechange = function (e) {
						if (xhr.readyState === 4) {
							clearTimeout(timer);
							if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
								that.result = that.handleData == null?xhr.responseText:that.handleData(xhr.responseText);
								if (dataInf.onSuccess) {
									dataInf.onSuccess.call(bindObj, that.result);
								}
							}
							else {
								if (!that.stopFlag && !that.timeoutFlag) {
									if (dataInf.onFail)
										dataInf.onFail.call(bindObj, xhr.status);
								}
							}
						}
						if (xhr.readyState === 0) {
							var timer = setTimeout(function () {
								that.timeoutFlag = true;
								if ((that.async) && that.timeoutFlag) {
									xhr.abort();
									if (dataInf.onTimeOut) {
										dataInf.onTimeOut.call(bindObj);
									}
								}
							}, that.timeOut);
						}
					}
					if (that.type == 'post') {
						xhr.open(that.type, dataInf.url, that.async); // 创建ajax请求
					}
					else if (that.type == 'get') {
						if (dataInf.data) {

							xhr.open(that.type, dataInf.url + '?' + data, that.async);
						}
						else {
							xhr.open(that.type, dataInf.url, that.async)
						}
					}
					if (that.dataType == 'json')
						xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");// 设置发送信息的数据类型
					if (that.type == 'get')
						xhr.send(null);
					else {
						xhr.send(data);
					}
				}
		},
		stop: function (name) {
			if (this[name].xhr && !isDomObject(this[name].xhr)) {
				this[name].stopFlag = true;
				this[name].xhr.abort();
			}
		},
		parse: function (inputData,outputData,pattern) {
			var result,
				 j,
				 k,
				 i,
				 len;
			switch ((typeof inputData).toLowerCase()) {

				case 'string':
					if (pattern.toLowerCase() === 'json') {
						result = JSON.parse(inputData);
					}
					break;
				case 'object':
					if (Object.prototype.toString.call(pattern) === '[object Array]') {
						for (i = 0, len = pattern.length; i < len; i++) {
							if(!pattern[i][2] ) {
								if(Object.prototype.toString.call(pattern[i][0]) === '[object Array]'){
									throw new Error('输入的数据不能是数组,除非有处理函数')
								}else{
										outputData[pattern[i][1]] = inputData[pattern[i][0]];
								}
							}
							else {
								if(Object.prototype.toString.call(pattern[i][0]) === '[object Array]'){
									outputData[pattern[i][1]] = pattern[i][2](inputData[pattern[i][0]]);
								}
								outputData[pattern[i][1]] = pattern[i][2](inputData[pattern[i][0]]);
							}
						}
						result = outputData;
					}
					else if (typeof pattern == 'function') {
						result = pattern(inputData);
					}
					break
				default:
					result = inputData;
					break;
			}
			return result;
		}
	}
})();

if(typeof module == 'object')
	module.exports={
        ajaxExpanding:ajaxExpanding
	};
