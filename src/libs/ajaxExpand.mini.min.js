var ajaxExpanding=(function () {
	function isDomObject(domObject , type){
		if(domObject == null ||undefined){
			return false;
		}
		if(typeof domObject == 'object' && domObject.nodeType === 1){
			if(!type || type=='all' || domObject.nodeName.toLowerCase() == type.toLowerCase())
				return true;
			else
				return false;
		}
		else{
			return false;
		}
	}
	function suffixParse(fileName){
		var array = fileName.split('.');
		return array[array.length-1];
	}
	function isJson(obj){
		var isjson= typeof obj== "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length;
		return isjson;
	}
	function getXhr(){
		return new XMLHttpRequest();
	}
	function encodeData(dataObj,that,dataType){
		var data='',
			  i,
			  j,
			  isSuffix = true,
			  isSize = true,
			  suffix,
			  size,
			  len,
			  errorInf = '',
			  checkInf = {},
			  checkInfs = [],
			  key;
		switch (dataType){
			case 'json':
				if(typeof dataObj == 'object'){
					for(key in dataObj) {
						if (dataObj[key] !== undefined && dataObj[key] !== null) {
							if (data !== '')
								data += '&' + key + '=' + JSON.stringify(dataObj[key]).replace(/\"/g, "");
							else
								data += key + '=' + JSON.stringify(dataObj[key]).replace(/\"/g, "");
						}
					}
				}
				else if(typeof dataObj == 'string'){
					data=dataObj;
				}
				break;
			case 'form':// 通过formData 传输
				if(window.FormData){
					var formData=new FormData();
					if(typeof dataObj == 'object'){
						for( key in dataObj){
							// 文件检测
							if(Object.prototype.toString.call(dataObj[key].value) == '[object FileList]') {
								checkInf = {
									isCheck:true,
									type:dataObj[key].type || key
								}
								len = dataObj[key].value.length;
								if (len == 0) {
									that.ischeck=false;
									checkInf.isCheck = false;
								}
								if(dataObj[key].suffix && that.ischeck){
									for (i = 0; i < len; i++) {
										suffix = suffixParse(dataObj[key].value[i].name);
										that.ischeck=dataObj[key].suffix.some(function(value){
											return suffix.toLowerCase() == value.toLowerCase();
										});
										isSuffix = that.ischeck;
									}
								}
								if(dataObj[key].maxSize && isSuffix && that.ischeck){
									for (i = 0; i < len; i++) {
										size = dataObj[key].value[i].size;
										if(size > dataObj[key].maxSize *1024 * 1024){
											that.ischeck = false;
											isSize = false;
										}
									}
								}
								if(len > 0 && !that.ischeck){
									if(!isSuffix){
										errorInf = '文件格式不满足:' + dataObj[key].suffix.join(',') + '格式';

									}else if(!isSize){
										errorInf = '文件大小超过:' + dataObj[key].maxSize + 'mb';
									}
									checkInf.isCheck = false;
								}
								if(that.ischeck){
									for (i = 0; i < len; i++) {
										formData.append(key, dataObj[key].value[i]);
									}
								}
								checkInf.errorInf =errorInf?errorInf:dataObj[key].errorInf;
								checkInfs.push(checkInf);
							}
							else{
								if(dataObj[key].pattern){
									checkInf = {
										isCheck:true,
										type:dataObj[key].type || key
									}
									var value;
									if(dataObj[key].checkValue != undefined){
										value = dataObj[key].checkValue;
									}
									else{
										value = dataObj[key].value;
									}
									if(!dataObj[key].pattern.test(value)){
										that.ischeck=false;
										checkInf.isCheck = false;
									}
									else {
										formData.append(key,dataObj[key].value);
									}
									checkInf.errorInf = dataObj[key].errorInf;
									checkInfs.push(checkInf);
								}
								else{
									formData.append(key,dataObj[key].value);
								}
							}
						}
						if(that.onCheck){
								that.onCheck(checkInfs);
						}
						data = formData;
					}
				}
			 	break;
		}
		return data;
	}
	// ajaxExpand构造函数
	function AjaxExpand(ajaxInf,bindObj){
		this.result = null;
		this.handleData = ajaxInf.handleData || null;
		this.type = ajaxInf.type || 'get';
		this.async = ajaxInf.async || false;
		this.dataType = ajaxInf.dataType || 'json';
		this.timeOut = ajaxInf.timeOut;
		this.url = ajaxInf.url;
		this.ischeck = true;
		this.preResult = [];
		this.data = ajaxInf.data;
		this.xhr = getXhr();
		this.onProgress = ajaxInf.onProgress;
		this.onSuccess = ajaxInf.onSuccess;
		this.onAbort = ajaxInf.onAbort;
		this.onFail = ajaxInf.onFail;
		this.onError = ajaxInf.onError;
		this.onCheck = ajaxInf.onCheck;
		this.onStart = ajaxInf.onStart;
		this.bindObj = bindObj || this;
	}
	// 处理ajax执行队列
	function handleAjaxList(ajaxList){
		if(ajaxList instanceof AjaxExpand){
			ajaxList.send();
		}
	}
	AjaxExpand.prototype = {
		constructor:AjaxExpand,
		send:function(){

				var data = encodeData(this.data,this,this.dataType),
						bindObj = this.bindObj,
						xhr = this.xhr,
						that = this;
			if(this.ischeck) {
				this.stopFlag = false;
				this.timeoutFlag = false;
				if(this.onStart){
					this.onStart();
				}
				if (!bindObj)
					bindObj = this;
				if (this.onProgress) {
					try {
						xhr.onprogress = function (e) {
							if (e.total > 0)
								this.onProgress.call(bindObj, e.loaded, e.total);
						}
					} catch (e) {
					}
				}
				if (this.onAbort) {
					try {
						xhr.onabort = function (e) {
							if (this.stopFlag)
								this.onAbort.call(bindObj, xhr.status);
						}
					} catch (e) {
					}
				}
				if (this.onError) {
					try {
						xhr.onerror = function (e) {
							this.onError.call(bindObj);
						}
					} catch (e) {
					}
				}

				xhr.onreadystatechange = function (e) {
					if (xhr.readyState === 4) {
						clearTimeout(timer);
						if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
							that.result = that.handleData == null?xhr.responseText:that.handleData(xhr.responseText);

							if (that.onSuccess) {
								that.onSuccess.call(bindObj, that.result);
							}
						}
						else {
							if (!that.stopFlag && !that.timeoutFlag) {
								if (that.onFail)
									that.onFail.call(bindObj, xhr.status);
							}
						}
					}
					if (xhr.readyState === 0) {
						var timer = setTimeout(function () {
							that.timeoutFlag = true;

							if ((that.async) && that.timeoutFlag) {
								xhr.abort();
								if (this.onTimeOut) {
									that.onTimeOut.call(bindObj);
								}
							}
						}, that.timeOut);
					}
				}
				if (this.type == 'post') {
					xhr.open(this.type, this.url, this.async); // 创建ajax请求
				}
				else if (this.type == 'get') {
					if (this.data) {
						xhr.open(this.type, this.url + '?' + data, this.async);
					}
					else {
						xhr.open(this.type, this.url, this.async)
					}
				}
				if (this.dataType == 'json')
					xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");// 设置发送信息的数据类型
				if (this.type == 'get')
					xhr.send(null);
				else {
					xhr.send(data);
				}
			}
		},
		stop:function(){
				this.stopFlag = true;
				this.xhr.abort();
		}
	}
	return {
		// 初始化一个ajax对象
		init: function (ajaxInf,bindObj) {
			return new AjaxExpand(ajaxInf);
		}
	}
})();

if(typeof module == 'object')
	module.exports={
        ajaxExpanding:ajaxExpanding
	};
